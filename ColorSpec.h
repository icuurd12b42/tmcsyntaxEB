#pragma once
//This enum helps to reference what color value is referenced to in and serves as intermidiary between the color character color buffer and the color array when parsing and when coloring ther code
//it also holds system/UI colors
enum COLORDEREF {
	NOTSET,
	UNKNOWNWORDCOLOR,
	DQUOTECOLOR,
	SQUOTECOLOR,
	SCOMMENTCOLOR,
	MCOMMENTCOLOR,
	NUMBERCOLOR,
	COLORSET1,
	COLORSET2,
	COLORSET3,
	COLORSET4,
	BADCHARSCOLOR,
	KEYWORDCOLOR,
	FUNCTIONCOLOR,
	LITERALCOLOR,
	CLASSFUNCCOLOR,
	STATICCLASSCOLOR,
	SELECTEDTEXTCOLOR,
	USERFUNCTIONCOLOR,
	TEXTBACKCOLOR,
	WORDBINDERCOLOR,
	LINENOCOLOR,
	LINENOBACKCOLOR,
	ACTIVELINECOLOR,
	ACTIVELINENOCOLOR,
	CARETCOLOR,
	_SIZE
};
class ColorSpec
{
public:
	wstring m_ColorSpecName;
	wstring m_ColorSpecFile;
	COLORREF QUOTECOLOR = 0x5ADBE6;
	COLORREF COMMENTCOLOR = 0x65AD82;
	COLORREF NUMBERCOLOR = 0xA8FFB5;
	COLORREF UNKNOWNWORDCOLOR = 0xC8D4D4;
	COLORREF COLORSET1 = 0xA6b2b2;
	COLORREF COLORSET2 = 0xA6b2b2;
	COLORREF COLORSET3 = 0xA6b2b2;
	COLORREF COLORSET4 = 0xA6b2b2;
	COLORREF BADCHARSCOLOR = 0xC8D4FF;
	COLORREF KEYWORDCOLOR = 0x746498;
	COLORREF FUNCTIONCOLOR = 0xA375CB;
	COLORREF LITERALCOLOR = 0x1F58DD;
	COLORREF CLASSFUNCCOLOR = 0xA375CB;
	COLORREF STATICCLASSCOLOR = 0xA375CB;
	COLORREF SELECTEDTEXTCOLOR = 0x784F26;
	COLORREF USERFUNCTIONCOLOR = 0xA375CB;
	COLORREF TEXTBACKCOLOR = 0x272727;
	COLORREF WORDBINDERCOLOR = 0x1F58DD;
	COLORREF LINENOCOLOR = 0xC8D4D4;
	COLORREF LINENOBACKCOLOR = 0x272727;
	COLORREF ACTIVELINECOLOR = 0x040404;
	COLORREF ACTIVELINENOCOLOR = 0x040404;
	COLORREF CARETCOLOR = 0xAAAAAA;

	//V2 stores the colors for the text in a memory buffer where each character in the edit box text has a matching byte in that color buffer that points to this array of colors
	COLORREF COLORS[COLORDEREF::_SIZE];
	//In actuality the color memory buffer is really the characters TYPE, which allows knowing if a edit was done inside a single line comment
	//or a multi line comment or a single quote or a double quote... which would, in theory, allow the parser to know the context of a partial parse 
	//and if the partial parse started inside a comment, which will allow faster parsing/coloring of the code when editing, especially for megabyte size pieces of code.

public:
	ColorSpec(const TCHAR* ColorSpecName, const TCHAR* ColorSpecFile);
	~ColorSpec();
	void LoadFile(LPCSTR filename);
	void ColorsToArray()
	{
		//called after loading, set each array item to the matching color loaded
		COLORS[COLORDEREF::NOTSET] = UNKNOWNWORDCOLOR;
		COLORS[COLORDEREF::UNKNOWNWORDCOLOR] = UNKNOWNWORDCOLOR; 
		
		COLORS[COLORDEREF::SQUOTECOLOR] = QUOTECOLOR;
		COLORS[COLORDEREF::DQUOTECOLOR] = QUOTECOLOR; //same
		COLORS[COLORDEREF::SCOMMENTCOLOR] = COMMENTCOLOR;
		COLORS[COLORDEREF::MCOMMENTCOLOR] = COMMENTCOLOR; //same
		COLORS[COLORDEREF::NUMBERCOLOR] = NUMBERCOLOR;
		
		
		COLORS[COLORDEREF::COLORSET1] = COLORSET1;
		COLORS[COLORDEREF::COLORSET2] = COLORSET2;
		COLORS[COLORDEREF::COLORSET3] = COLORSET3;
		COLORS[COLORDEREF::COLORSET4] = COLORSET4;
		COLORS[COLORDEREF::BADCHARSCOLOR] = BADCHARSCOLOR;
		COLORS[COLORDEREF::KEYWORDCOLOR] = KEYWORDCOLOR;
		COLORS[COLORDEREF::FUNCTIONCOLOR] = FUNCTIONCOLOR;
		COLORS[COLORDEREF::LITERALCOLOR] = LITERALCOLOR;
		COLORS[COLORDEREF::CLASSFUNCCOLOR] = CLASSFUNCCOLOR;
		COLORS[COLORDEREF::STATICCLASSCOLOR] = STATICCLASSCOLOR;
		COLORS[COLORDEREF::SELECTEDTEXTCOLOR] = SELECTEDTEXTCOLOR;
		COLORS[COLORDEREF::USERFUNCTIONCOLOR] = USERFUNCTIONCOLOR;
		COLORS[COLORDEREF::TEXTBACKCOLOR] = TEXTBACKCOLOR;
		COLORS[COLORDEREF::WORDBINDERCOLOR] = WORDBINDERCOLOR;
		COLORS[COLORDEREF::LINENOCOLOR] = LINENOCOLOR;
		COLORS[COLORDEREF::LINENOBACKCOLOR] = LINENOBACKCOLOR;
		COLORS[COLORDEREF::ACTIVELINECOLOR] = ACTIVELINECOLOR;
		COLORS[COLORDEREF::ACTIVELINENOCOLOR] = ACTIVELINENOCOLOR;
		COLORS[COLORDEREF::CARETCOLOR] = CARETCOLOR;
	}
};

